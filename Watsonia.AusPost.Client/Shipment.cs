using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;

namespace Watsonia.AusPost.Client
{
	/// <summary>
	/// Shipment information to be supplied for each delivery of items to a physical address.
	/// </summary>
	public sealed class Shipment : ApiItem
	{
		/// <summary>
		/// A unique reference for the shipment, generated by the merchant.
		/// </summary>
		/// <value>
		/// The reference.
		/// </value>
		[StringLength(50)]
		public string ShipmentReference { get; set; }

		/// <summary>
		/// A merchant specified reference for the shipment. This value is not required to be unique.
		/// </summary>
		/// <value>
		/// The customer reference.
		/// </value>
		[StringLength(50)]
		public string CustomerReference1 { get; set; }

		/// <summary>
		/// A merchant specified reference for the shipment. This value is not required to be unique.
		/// </summary>
		/// <value>
		/// The customer reference2.
		/// </value>
		[StringLength(50)]
		public string CustomerReference2 { get; set; }

		/// <summary>
		/// Description of the goods. This is printed on the auxiliary label.
		/// </summary>
		/// <value>
		/// The goods descriptions.
		/// </value>
		[StringLength(40)]
		public string GoodsDescription1 { get; set; }

		/// <summary>
		/// Description of the goods. This is printed on the auxiliary label.
		/// </summary>
		/// <value>
		/// The goods descriptions.
		/// </value>
		[StringLength(40)]
		public string GoodsDescription2 { get; set; }

		/// <summary>
		/// Description of the goods. This is printed on the auxiliary label.
		/// </summary>
		/// <value>
		/// The goods descriptions.
		/// </value>
		[StringLength(40)]
		public string GoodsDescription3 { get; set; }

		/// <summary>
		/// Despatch Date of a shipment. Date should be supplied in the following format yyyy-MM-dd.
		/// Note - Despatch Date can not be more than 14 days in past or more than 14 days in future.
		/// </summary>
		/// <value>
		/// The despatch date.
		/// </value>
		public string DespatchDate { get; set; }

		/// <summary>
		/// If set true, the system attempts to search for existing pending shipments to consolidate this shipment with. If set to false, a new shipment is created as per normal workflow. For further information on consolidation, please refer to Shipment Consolidation. 
		/// </summary>
		/// <remarks>
		/// If unassigned, defaults to true for StarTrack products, otherwise defaults to false.
		/// </remarks>
		/// <value>
		///  <c>true</c> if consolidate; otherwise, <c>false</c>.
		/// </value>
		public bool? Consolidate { get; set; }

		/// <summary>
		/// Whether the recipient of the shipment will receive tracking notification email. The email address of the receiver must be provided if the email_tracking_enabled field is set to true. 
		/// </summary>
		/// <remarks>
		/// For some products this defaults to true.
		/// </remarks>
		/// <value>
		/// The email tracking enabled.
		/// </value>
		public bool? EmailTrackingEnabled { get; set; }

		/// <summary>
		/// The address where the items will be sent from.
		/// </summary>
		/// <value>
		/// From.
		/// </value>
		public Sender From { get; set; } = new Sender();

		/// <summary>
		/// The address where the items will be delivered.
		/// </summary>
		/// <value>
		/// To.
		/// </value>
		public Recipient To { get; set; } = new Recipient();

		/// <summary>
		/// Use "DESPATCH" to indicate an outbound or normal shipment (this is the default) or "RETURN" to indicate a returns shipment.
		/// </summary>
		/// <value>
		/// The type of the movement.
		/// </value>
		public MovementType MovementType { get; set; }

		/// <summary>
		/// An item element to be supplied for each parcel.
		/// </summary>
		/// <value>
		/// The items.
		/// </value>
		public List<Item> Items { get; set; } = new List<Item>();

		/// <summary>
		/// Loads a Shipment from a JSON string.
		/// </summary>
		/// <param name="json">The json.</param>
		public static Shipment FromJson(string json)
		{
			var serializer = new ApiSerializer();
			return serializer.FromJson<Shipment>(json);
		}
	}
}
