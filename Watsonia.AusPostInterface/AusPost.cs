using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace Watsonia.AusPostInterface
{
	public static class AusPost
	{
		private static string TestingUrl = "https://digitalapi.auspost.com.au/testbed/shipping/v1/";
		private static string LiveUrl = "https://digitalapi.auspost.com.au/shipping/v1/";

		/// <summary>
		/// Gets or sets a value indicating whether this instance is making requests against the testbed.
		/// </summary>
		/// <value>
		///   <c>true</c> if in testing; otherwise, <c>false</c>.
		/// </value>
		internal static bool Testing { get; set; }

		/// <summary>
		/// This interface retrieves information regarding the requestor’s charge account and the postage products that the charge account is able to use.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <returns></returns>
		public async static Task<GetAccountsResponse> GetAccountsAsync(string accountNumber, string username, string password)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "accounts/" + accountNumber;

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// GET the request
				HttpResponseMessage response = await client.GetAsync(apiUrl);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				string responseJson = await response.Content.ReadAsStringAsync();
				var result = GetAccountsResponse.FromJson(responseJson);
				result.Succeeded = response.StatusCode == System.Net.HttpStatusCode.OK;

				return result;
			}
		}

		/// <summary>
		/// This interface creates a shipment with items and returns a summary of the pricing for the items.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="shipments">The shipments.</param>
		/// <returns></returns>
		public async static Task<CreateShipmentsResponse> CreateShipmentsAsync(string accountNumber, string username, string password, CreateShipmentsRequest shipments)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "shipments";

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// Build the JSON content from the shipment
				var json = shipments.ToJson();
				HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

				// POST the request
				HttpResponseMessage response = await client.PostAsync(apiUrl, content);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				string responseJson = await response.Content.ReadAsStringAsync();
				var result = CreateShipmentsResponse.FromJson(responseJson);
				result.Succeeded = response.StatusCode == System.Net.HttpStatusCode.Created;

				return result;
			}
		}

		/// <summary>
		/// This service updates an existing shipment that has previously been created using the Create Shipment interface.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="shipmentID">The identifier for the shipment generated by Australia Post.</param>
		/// <param name="items">The items.</param>
		/// <returns></returns>
		public async static Task<UpdateItemsResponse> UpdateItemsAsync(string accountNumber, string username, string password, string shipmentID, UpdateItemsRequest items)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "shipments/" + shipmentID + "/items";

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// Build the JSON content from the items
				var json = items.ToJson();
				HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

				// PUT the request
				HttpResponseMessage response = await client.PutAsync(apiUrl, content);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				if (response.StatusCode == System.Net.HttpStatusCode.OK)
				{
					var result = new UpdateItemsResponse();
					result.Succeeded = true;
					return result;
				}
				else
				{
					// Read JSON errors
					string responseJson = await response.Content.ReadAsStringAsync();
					var result = UpdateItemsResponse.FromJson(responseJson);
					result.Succeeded = false;
					return result;
				}
			}
		}

		/// <summary>
		/// This service deletes an item in a shipment for shipments that have not been included in an order.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="shipmentID">The identifier for the shipment generated by Australia Post.</param>
		/// <param name="itemID">The identifier for the item generated by Australia Post.</param>
		/// <returns></returns>
		public async static Task<DeleteItemsResponse> DeleteItemAsync(string accountNumber, string username, string password, string shipmentID, string itemID)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "shipments/" + shipmentID + "/items/" + itemID;

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// DELETE the item
				HttpResponseMessage response = await client.DeleteAsync(apiUrl);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				if (response.StatusCode == System.Net.HttpStatusCode.OK)
				{
					var result = new DeleteItemsResponse();
					result.Succeeded = true;
					return result;
				}
				else
				{
					// Read JSON errors
					string responseJson = await response.Content.ReadAsStringAsync();
					var result = DeleteItemsResponse.FromJson(responseJson);
					result.Succeeded = false;
					return result;
				}
			}
		}

		/// <summary>
		/// This service deletes an item in a shipment for shipments that have not been included in an order.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="shipmentID">The identifier for the shipment generated by Australia Post.</param>
		/// <returns></returns>
		public async static Task<DeleteShipmentResponse> DeleteShipmentAsync(string accountNumber, string username, string password, string shipmentID)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "shipments/" + shipmentID;

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// DELETE the item
				HttpResponseMessage response = await client.DeleteAsync(apiUrl);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				if (response.StatusCode == System.Net.HttpStatusCode.OK)
				{
					var result = new DeleteShipmentResponse();
					result.Succeeded = true;
					return result;
				}
				else
				{
					// Read JSON errors
					string responseJson = await response.Content.ReadAsStringAsync();
					var result = DeleteShipmentResponse.FromJson(responseJson);
					result.Succeeded = false;
					return result;
				}
			}
		}

		/// <summary>
		/// This service creates an order for the referenced shipments that have previously been created using the Create Shipments service.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="shipments">The shipments.</param>
		/// <returns></returns>
		public async static Task<CreateOrderFromShipmentsResponse> CreateOrderFromShipmentsAsync(string accountNumber, string username, string password, CreateOrderFromShipmentsRequest shipments)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "orders";

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// Build the JSON content from the items
				var json = shipments.ToJson();
				HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

				// PUT the request
				HttpResponseMessage response = await client.PutAsync(apiUrl, content);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				string responseJson = await response.Content.ReadAsStringAsync();
				var result = CreateOrderFromShipmentsResponse.FromJson(responseJson);
				result.Succeeded = response.StatusCode == System.Net.HttpStatusCode.Created;

				return result;
			}
		}

		/// <summary>
		/// This service creates an order for the contained shipments and items.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="shipments">The shipments.</param>
		/// <returns></returns>
		public async static Task<CreateOrderIncludingShipmentsResponse> CreateOrderIncludingShipmentsAsync(string accountNumber, string username, string password, CreateOrderIncludingShipmentsRequest shipments)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "orders";

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// Build the JSON content from the items
				var json = shipments.ToJson();
				HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

				// POST the request
				HttpResponseMessage response = await client.PostAsync(apiUrl, content);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				string responseJson = await response.Content.ReadAsStringAsync();
				var result = CreateOrderIncludingShipmentsResponse.FromJson(responseJson);
				result.Succeeded = response.StatusCode == System.Net.HttpStatusCode.Created;

				return result;
			}
		}

		/// <summary>
		/// This service initiates the generation of labels for the requested shipments that have been previously created using the Create Shipments service.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="shipments">The shipments.</param>
		/// <returns></returns>
		public async static Task<CreateLabelsResponse> CreateLabelsAsync(string accountNumber, string username, string password, CreateLabelsRequest shipments)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "labels";

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// Build the JSON content from the items
				var json = shipments.ToJson();
				HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

				// POST the request
				HttpResponseMessage response = await client.PostAsync(apiUrl, content);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				string responseJson = await response.Content.ReadAsStringAsync();
				var result = CreateLabelsResponse.FromJson(responseJson);
				result.Succeeded = response.StatusCode == System.Net.HttpStatusCode.OK;

				return result;
			}
		}

		/// <summary>
		/// Downloads the labels for a shipment.
		/// </summary>
		/// <param name="labelUrl">The label URL.</param>
		/// <returns></returns>
		public async static Task<DownloadLabelsResponse> DownloadLabelsAsync(string labelUrl)
		{
			using (var client = new HttpClient())
			{
				// GET the request
				HttpResponseMessage response = await client.GetAsync(labelUrl);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				var result = new DownloadLabelsResponse();
				if (response.StatusCode == System.Net.HttpStatusCode.OK)
				{
					result.Stream = await response.Content.ReadAsStreamAsync();
				}
				// TODO: Need to build the errors manually?
				//else
				//{
				//	// Read JSON errors
				//	string responseJson = await response.Content.ReadAsStringAsync();
				//	result.FromJson(responseJson);
				//}
				result.Succeeded = response.StatusCode == System.Net.HttpStatusCode.OK;
				return result;
			}
		}

		/// <summary>
		/// This interface retrieves information for orders, and the items contained within orders created using the Create Orders interface.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="orders">The orders.</param>
		/// <returns></returns>
		public async static Task<GetOrdersResponse> GetOrdersAsync(string accountNumber, string username, string password, GetOrdersRequest orders)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;

			// Build the query string
			Dictionary<string, string> queryParams = new Dictionary<string, string>();
			// HACK: I don't think this works, but I'm not 100% sure:
			//if (orders.OrderIDs.Any())
			//{
			//	queryParams.Add("order_ids", string.Join(",", orders.OrderIDs));
			//}
			if (orders.Offset > 0)
			{
				queryParams.Add("offset", orders.Offset.ToString());
			}
			if (orders.NumberOfOrders > 0)
			{
				queryParams.Add("number_of_orders", orders.NumberOfOrders.ToString());
			}
			string apiUrl = apiUrlPrefix + "orders?" + string.Join("&", queryParams.Select(p => $"{p.Key}={p.Value}"));

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// GET the request
				HttpResponseMessage response = await client.GetAsync(apiUrl);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				string responseJson = await response.Content.ReadAsStringAsync();
				var result = GetOrdersResponse.FromJson(responseJson);
				result.Succeeded = response.StatusCode == System.Net.HttpStatusCode.OK;

				return result;
			}
		}

		/// <summary>
		/// This interface retrieves information for shipments, and the items contained within shipments created using the Create Shipments interface.
		/// </summary>
		/// <param name="accountNumber">The Australia Post account number.</param>
		/// <param name="username">The Australia Post API username.</param>
		/// <param name="password">The Australia Post API password.</param>
		/// <param name="shipments">The shipments.</param>
		/// <returns></returns>
		public async static Task<GetShipmentsResponse> GetShipmentsAsync(string accountNumber, string username, string password, GetShipmentsRequest shipments)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;

			// Build the query string
			Dictionary<string, string> queryParams = new Dictionary<string, string>();
			if (shipments.ShipmentIDs.Any())
			{
				queryParams.Add("shipment_ids", string.Join(",", shipments.ShipmentIDs));
			}
			if (shipments.Offset > 0)
			{
				queryParams.Add("offset", shipments.Offset.ToString());
			}
			if (shipments.NumberOfShipments > 0)
			{
				queryParams.Add("number_of_shipments", shipments.NumberOfShipments.ToString());
			}
			if (!string.IsNullOrEmpty(shipments.Status))
			{
				queryParams.Add("status", shipments.Status);
			}
			if (!string.IsNullOrEmpty(shipments.DespatchDate))
			{
				queryParams.Add("despatch_date", shipments.DespatchDate);
			}
			if (!string.IsNullOrEmpty(shipments.SenderReference))
			{
				queryParams.Add("sender_reference", shipments.SenderReference);
			}
			string apiUrl = apiUrlPrefix + "shipments?" + string.Join("&", queryParams.Select(p => $"{p.Key}={p.Value}"));

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// GET the request
				HttpResponseMessage response = await client.GetAsync(apiUrl);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				string responseJson = await response.Content.ReadAsStringAsync();
				var result = GetShipmentsResponse.FromJson(responseJson);
				result.Succeeded = response.StatusCode == System.Net.HttpStatusCode.OK;

				return result;
			}
		}

		/// <summary>
		/// This service returns the PDF order summary that contains a charges breakdown of the articles in the order.
		/// </summary>
		/// <param name="accountNumber">The account number.</param>
		/// <param name="username">The username.</param>
		/// <param name="password">The password.</param>
		/// <param name="orderID">The order id you wish to retrieve the summary for.</param>
		/// <returns></returns>
		public async static Task<GetOrderSummaryResponse> GetOrderSummaryAsync(string accountNumber, string username, string password, GetOrderSummaryRequest request)
		{
			string apiUrlPrefix = AusPost.Testing ? AusPost.TestingUrl : AusPost.LiveUrl;
			string apiUrl = apiUrlPrefix + "accounts/" + accountNumber + "/orders/" + request.OrderID + "/summary";

			using (var client = new HttpClient())
			{
				// Add authentication headers
				byte[] apiKey = Encoding.UTF8.GetBytes(username + ":" + password);
				client.DefaultRequestHeaders.Add("Authorization", "Basic " + Convert.ToBase64String(apiKey));
				client.DefaultRequestHeaders.Add("Account-Number", accountNumber);

				// Add the account number into the request
				request.AccountNumber = accountNumber;

				// GET the request
				HttpResponseMessage response = await client.GetAsync(apiUrl);

				// Read the response
				// TODO: I may actually need to do different things if the status code comes back as e.g. NotFound?
				if (response.StatusCode == System.Net.HttpStatusCode.OK)
				{
					var result = new GetOrderSummaryResponse();
					result.Succeeded = true;
					result.Stream = await response.Content.ReadAsStreamAsync();
					return result;
				}
				else
				{
					// Read JSON errors
					string responseJson = await response.Content.ReadAsStringAsync();
					var result = GetOrderSummaryResponse.FromJson(responseJson);
					return result;
				}
			}
		}
	}
}
